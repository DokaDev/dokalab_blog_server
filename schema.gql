# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AttachmentDto {
  id: Int!
  uploadState: AttachmentUploadState!
  postId: Int
  originalFilename: String!
  mimeType: String!
  size: Int!
  createdAt: DateTime!
  uploadExpiresAt: DateTime!
  commitExpiresAt: DateTime
  committedAt: DateTime
}

enum AttachmentUploadState {
  PENDING
  READY
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type AttachmentPrepareUploadResponse {
  attachment: AttachmentDto!
  presignedUrl: String!
}

type PostDto {
  """ID of the post"""
  id: Int!

  """"""
  postNumber: Int

  """Title of the post"""
  title: String!

  """Content of the post"""
  content: String!

  """Read time in minutes"""
  readTime: Int

  """Creation date of the post"""
  createdAt: DateTime!

  """Status of the post"""
  status: status!

  """Last update date of the post"""
  updatedAt: DateTime!

  """Deletion date of the post"""
  deletedAt: DateTime

  """Board associated with the post"""
  board: BoardDto!

  """Attachments"""
  attachments: [AttachmentDto!]
}

enum status {
  PUBLISHED
  DRAFT
  DELETED
}

type BoardDto {
  """Board ID"""
  id: Int!

  """Name of Board"""
  title: String!

  """Slug of Board(e.g. Development -> devel)"""
  slug: String!

  """When the Board was created."""
  createdAt: DateTime!

  """When the Board was deleted. Basic soft delete timestamp."""
  deletedAt: DateTime

  """The group to which the board belongs"""
  boardGroup: BoardGroupDto
  posts: [PostDto!]!
}

type BoardGroupDto {
  """Board Group ID"""
  id: Int!

  """Board Group Title"""
  title: String!

  """List of boards in the group"""
  boards: [BoardDto!]!
}

type TagDto {
  id: Int!
  name: String!
  createdAt: DateTime!
  deletedAt: DateTime
}

type Query {
  """Get all boards"""
  findAllBoards: [BoardDto!]!

  """Get a board by ID"""
  findBoardById(id: Int!): BoardDto

  """Get all board groups"""
  findAllBoardGroups: [BoardGroupDto!]!

  """Get a board group by ID"""
  findBoardGroupById(id: Int!): BoardGroupDto

  """Retrieve all posts with pagination"""
  findAllPosts(pagination: GraphQLPaginationArgs!): [PostDto!]!

  """
  Find a post by its ID. Admins can see all posts, others can only see non-deleted posts.
  """
  findPostById(id: Int!): PostDto

  """
  Find a post by its post number. Post number is public identifier. Admins can see all posts, others can only see non-deleted posts.
  """
  findPostByPostNumber(postNumber: Int!): PostDto

  """Search posts by keyword in title or content"""
  searchPosts(pagination: GraphQLPaginationArgs!, keyword: String!): [PostDto!]! @deprecated(reason: "not deprecated but will be implemented in the future")

  """
  Retrieve all tags. Admins can see all tags, others can only see non-deleted tags.
  """
  findAllTags: [TagDto!]!

  """
  Find a tag by ID. Admins can see all tags, others can only see non-deleted tags.
  """
  findTagById(id: Int!): TagDto

  """Search for tags by keyword. Supports prefix search."""
  searchTags(keyword: String!): [TagDto!]!
}

input GraphQLPaginationArgs {
  pageNumber: Float!
  pageSize: Float!
}

type Mutation {
  createBoard(data: CreateBoardInput!): BoardDto!
  deleteBoard(id: Int!): BoardDto

  """Create a new board group"""
  createBoardGroup(data: CreateBoardGroupInput!): BoardGroupDto!

  """Delete a board group by ID"""
  deleteBoardGroup(id: Int!): BoardGroupDto

  """Create a new post. Admins only."""
  createPost(input: CreatePostInput!): PostDto!

  """Update an existing post. Admins only."""
  updatePost(input: UpdatePostInput!): PostDto!

  """Delete a post by ID. Admins only. (Soft Delete)"""
  deletePost(id: Int!): PostDto
  attachmentPrepareUpload(data: CreateAttachmentInput!): AttachmentPrepareUploadResponse!
  attachmentCompleteUpload(attachmentId: Int!): AttachmentDto
  deleteAttachment(attachmentId: Int!): AttachmentDto!
  commitAttachments(postId: Int!, attachmentIds: [Int!]!): [AttachmentDto!]!

  """Create a new tag. Tag names must be unique."""
  createTag(input: CreateTagInputDto!): TagDto!
}

input CreateBoardInput {
  """Title of the board"""
  title: String!

  """Slug of the board (e.g. Development -> devel)"""
  slug: String!

  """Board group ID that this board belongs to"""
  boardGroupId: Int!
}

input CreateBoardGroupInput {
  """Title of the board group"""
  title: String!
}

input CreatePostInput {
  """Title of the post"""
  title: String!

  """Content of the post"""
  content: String!

  """Rendered content of the post"""
  renderedContent: String

  """Plain text content of the post"""
  plainContent: String

  """Board ID that the post belongs to"""
  boardId: Int!

  """Is Draft or Not"""
  isDraft: Boolean! = false
}

input UpdatePostInput {
  id: Int!
  title: String!
  content: String!
  renderedContent: String
  plainContent: String
  isDraft: Boolean! = false
  boardId: Int
}

input CreateAttachmentInput {
  originalFileName: String!
  size: Int!
  mimeType: String!
}

input CreateTagInputDto {
  name: String!
}